@page "/Adminpage"


@layout _LayoutAdmin
@inject IJSRuntime _JSRuntime
@inject ConfigurationData _ConfigurationData
@inject NavigationManager UriHelper
@inject MyBlazorDbContext _DbContext

<AuthorizeView>
    <Authorized>
        <div class="row " style="background-color:lightgoldenrodyellow;">
            <div class=" col w-25 text-center " style="max-width:300px;">
                <h1>数据添加</h1>
                <form class="text-left">
                    <div class="form-group ">
                        <label for="inputCity">所属单位</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.TD">
                    </div>
                    <div class="form-group">
                        <label for="inputEmail4">产品名称</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.Name">
                    </div>
                    <div class="form-group">
                        <label for="exampleFormControlSelect1">试验报告</label>
                        <select class="form-control" id="exampleFormControlSelect1" @bind="@FromCertificate.ReprotFileMatching">
                            <option selected value=""></option>
                            @if (ReportEnums != null)
                            {
                                for (int i = 0; i < ReportEnums.Length; i++)
                                {
                                    var name = ReportEnums[i].ToString();
                                    <option>@name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="gridCheck">
                            <label class="form-check-label" for="gridCheck">
                                自定义产品编号
                            </label>
                        </div>
                        <input type="text" class="form-control" @bind="FromCertificate.Numbel">
                    </div>

                    <div class="form-check">

                    </div>
                    <div class="form-group">

                        <label for="inputAddress">试验日期</label>
                        <input type="date" class="form-control" @bind="@FromCertificate.TestDateTime">
                    </div>
                    <div class="form-group">
                        <label for="inputAddress2">下次试验日期</label>
                        <input type="date" class="form-control" @bind="@FromCertificate.VNextTestDateTime">
                    </div>
                    <div class="form-group ">
                        <label for="inputCity">试验人</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.TestPersonnel">
                    </div>
                    <div class="form-group ">
                        <label for="inputCity">校验单位</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.ToTD">
                    </div>
                    <div class="form-group ">
                        <label for="inputCity">生产厂家</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.Manufacturer">
                    </div>
                    <div class="form-group ">
                        <label for="inputCity">试验环境</label>
                        <input type="text" class="form-control" @bind="@FromCertificate.TestSurroundings">
                    </div>
                    <div class="form-group text-right ">
                        <button type="button" class="btn btn-primary" @onclick="@AddCertificates">添加</button>
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                            批量添加
                        </button>
                    </div>
                </form>
            </div>

            <dvi class="container w-75 text-center">
                <div class="text-left">
                    <form>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="inputdate">开始时间</label>
                                <input type="date" class="form-control" id="inputdate" @bind="@Query.BeingTime">
                            </div>
                            <div class="form-group col-md-6">
                                <label for="inputdate4">结束时间</label>
                                <input type="date" class="form-control" id="inputdate4" @bind="@Query.EndTime">
                            </div>
                        </div>
                        @*<div class="form-group">
                            <label for="inputAddress">Address</label>
                            <input type="text" class="form-control" id="inputAddress" placeholder="1234 Main St">
                        </div>
                        <div class="form-group">
                            <label for="inputAddress2">Address 2</label>
                            <input type="text" class="form-control" id="inputAddress2" placeholder="Apartment, studio, or floor">
                        </div>*@
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="inputState">试验报告</label>
                                <select class="form-control" id="ontrolSelect1" @bind="@Query.ReprotEnumSelect">
                                    <option selected value=""></option>
                                    @if (ReportEnums != null)
                                    {
                                        for (int i = 0; i < ReportEnums.Length; i++)
                                        {
                                            var name = ReportEnums[i].ToString();
                                            <option>@name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-group col-md-4 align-text-bottom">
                                <label for="inputState"></label>
                                <button type="submit" class="btn btn-primary form-control"  @onclick="@QueryCertificates">查 询</button>
                            </div>                        
                        </div>
                    </form>
                </div>

                <div  style="height:55rem;overflow-y:scroll">
                    @if (Certificates.Count>0)
                    {
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">唯一编码</th>
                                    <th scope="col">产品名称</th>
                                    <th scope="col">产品编号</th>
                                    <th scope="col">试验报告</th>
                                    <th scope="col">操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int k = 0; k < Certificates.Count; k++)
                                {
                                    var itme = Certificates[k];
                                    <tr>
                                        <th>@(k+1)</th>
                                        <td>@itme.Guid</td>
                                        <td>@itme.Name</td>
                                        <td>@itme.ReprotFileMatching</td>
                                        <td>@itme.Numbel</td>
                                        <td>
                                            <button class="btn btn-primary" @onclick="@(d=>UpCertificates(@itme.Guid))">复制</button>
                                            <button class="btn btn-primary" @onclick="@(d=>DelCertificates(@itme.Guid))">删除</button>
                                        </td>
                                    </tr>

                                 }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="spinner-border" style="width: 8rem; height: 8rem;" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
            </dvi>


        </div>

        @**弹出对话框*@
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalCenterTitle">批量生产</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body ">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">生成数量</span>
                            </div>
                            <input type="text" class="form-control" @bind="BatchNumber" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>
                        <p>提示：批量生成规则是【产品编号按顺序递增】</p>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">取消</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="AddCertificatesBatch">确认</button>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        @*<a href="Identity/Account/Login">F:\Visual Studio 2015\威特电缆\MyBlazor\Areas\Identity\Pages\Account\Login</a>*@

        @{
            UriHelper.NavigateTo("Identity/Account/Login", true);
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Certificate FromCertificate =new Certificate();

    private List<Certificate> Certificates = new List<Certificate>(500);

    private QueryCriteria Query = new QueryCriteria();
    private string ImgSrc { set; get; }
    private int BatchNumber { set; get; } = 0;
    private string QrcodeUri { set; get; }

    private string[] ReportEnums { set; get; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //if (authenticationStateTask.Result.User.Identity.IsAuthenticated)
        //{
        //QueryCertificates();
        ReportEnums = Enum.GetNames(typeof(ReportEnum));
    }

    private async void AddCertificates()
    {
        if (FromCertificate != null)
        {
            var select = await _DbContext.TableCertificates.AsNoTracking().Where(f => f.Numbel == FromCertificate.Numbel).FirstOrDefaultAsync();
            if (select == null)
            {
                var certificate = new Certificate()
                {
                    Guid = Guid.NewGuid().ToString(),
                    TD = FromCertificate.TD,
                    ToTD = FromCertificate.ToTD,
                    Name = FromCertificate.Name,
                    Numbel = GetProductNumber().ToString(),
                    TestDateTime = FromCertificate.TestDateTime,
                    TestPersonnel = FromCertificate.TestPersonnel,
                    ReprotFileMatching= FromCertificate.ReprotFileMatching,
                    CreateTime = _ConfigurationData.GetUtcTime().Date,
                    Manufacturer= FromCertificate.Manufacturer,
                    TestSurroundings = FromCertificate.TestSurroundings,
                    VNextTestDateTime = FromCertificate.VNextTestDateTime
                };
                Certificates.Add(certificate);
                _DbContext.TableCertificates.Add(certificate);
                _DbContext.SaveChanges();
                StateHasChanged();
                await _JSRuntime.InvokeVoidAsync("alert", "产品添加成功");
            }
            else
            {
                await _JSRuntime.InvokeVoidAsync("alert", "产品添加失败,已经存在相同编码产品");
            }

            // _ConfigurationData.SaveJson(Certificates);
        }
    }

    private async void DelCertificates(string number)
    {
        var scer = Certificates.Find(r => r.Guid == number);
        if (scer != null)
        {
            _DbContext.Remove(scer);
            Certificates.Remove(scer);
            _DbContext.SaveChanges();
            await _JSRuntime.InvokeVoidAsync("alert", "产品删除成功");
        }
    }

    private void UpCertificates(string guid)
    {
        var scer = Certificates.Find(r => r.Guid == guid);
        if (scer != null)
        {
            FromCertificate = new Certificate()
            {
                TD = scer.TD,
                ToTD = scer.ToTD,
                Name = scer.Name,
                Numbel = scer.Numbel,
                TestDateTime = scer.TestDateTime,
                TestPersonnel = scer.TestPersonnel,
                VNextTestDateTime = scer.VNextTestDateTime
            };
        }
    }

    private int GetProductNumber()
    {
        DateTime cstTime = _ConfigurationData.GetUtcTime();
        var yy = cstTime.ToString("yy");
        var MM = cstTime.ToString("MM");
        var number = int.Parse((yy + MM).ToString()) * 100000;
        var daytime = cstTime.AddDays(-Convert.ToInt32(cstTime.Date.Day));
        var count = _DbContext.TableCertificates.AsNoTracking().Where(w => w.CreateTime > daytime).Count();
        return number + count + 1;
    }

    private async void AddCertificatesBatch()
    {
        if (BatchNumber > 0)
        {
            var beingcount = GetProductNumber();

            var endcount = beingcount + BatchNumber;
            await Task<int>.Run(() =>
            {

                for (int i = beingcount; i < endcount; i++)
                {
                    var num = i.ToString();
                    var select = Certificates.FindLast(f => f.Numbel == num);
                    if (select == null)
                    {
                        var certificate = new Certificate()
                        {
                            Guid = Guid.NewGuid().ToString(),
                            TD = FromCertificate.TD,
                            ToTD = FromCertificate.ToTD,
                            Name = FromCertificate.Name,
                            Numbel = num.ToString(),
                            TestDateTime = FromCertificate.TestDateTime,
                            TestPersonnel = FromCertificate.TestPersonnel,
                            ReprotFileMatching = FromCertificate.ReprotFileMatching,
                            CreateTime = _ConfigurationData.GetUtcTime().Date,
                            Manufacturer = FromCertificate.Manufacturer,
                            TestSurroundings = FromCertificate.TestSurroundings,
                            VNextTestDateTime = FromCertificate.VNextTestDateTime
                        };
                        Certificates.Add(certificate);
                        _DbContext.TableCertificates.Add(certificate);
                    }
                }
                _DbContext.SaveChanges();
                //_ConfigurationData.SaveJson(Certificates);

            });
            StateHasChanged();
        }
    }

    private string GetImg(string guid)
    {
        QrcodeUri = UriHelper.BaseUri + @"/" + guid;

        return _ConfigurationData.GetQrImg(QrcodeUri);

    }

    private async void Querys()
    {
        //   Certificates = await QueryCertificates();
    }

    private async void QueryCertificates()
    {
        //DateTime dateTime = _ConfigurationData.GetUtcTime().
        if (Query.ReprotEnumSelect != null)
        {
            Certificates= _DbContext.TableCertificates.Where(w => w.CreateTime >= Query.BeingTime && w.CreateTime <= Query.EndTime).Where(w=>w.ReprotFileMatching== Query.ReprotEnumSelect).AsNoTracking().OrderByDescending(o=>o.CreateTime).ToList();

        }
        else
        {
            Certificates=  _DbContext.TableCertificates.AsNoTracking().Where(w => w.CreateTime >= Query.BeingTime && w.CreateTime <= Query.EndTime).OrderByDescending(o => o.CreateTime).ToList();

        }
        await _JSRuntime.InvokeVoidAsync("alert", "查询成功"+ Certificates.Count.ToString());
        //  StateHasChanged();
        //return null;
    }
}
